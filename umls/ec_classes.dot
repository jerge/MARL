digraph "classes" {
rankdir=BT
charset="utf-8"
"ec.dreamcoder.differentiation.AbsoluteValue" [color="black", fontcolor="black", label="{AbsoluteValue|name : str\l|backward(x)\lforward(x)\l}", shape="record", style="solid"];
"ec.dreamcoder.program.Abstraction" [color="black", fontcolor="black", label="{Abstraction|annotatedType\lbody\lhashCode : NoneType\lisAbstraction\l|annotateTypes(context, environment)\lbetaReduce()\lclone()\levaluate(environment)\lfreeVariables()\linferType(context, environment, freeVariables)\lisBetaLong()\lshift(offset, depth)\lshow(isFunction)\lsize()\lsubstitute(old, new)\lvisit(visitor)\lwalk(surroundingAbstractions)\lwalkUncurried(d)\l}", shape="record", style="solid"];
"ec.dreamcoder.differentiation.Addition" [color="black", fontcolor="black", label="{Addition|name : str\l|backward(x, y)\lforward(x, y)\l}", shape="record", style="solid"];
"ec.dreamcoder.likelihoodModel.AllOrNothingLikelihoodModel" [color="black", fontcolor="black", label="{AllOrNothingLikelihoodModel|timeout : NoneType\l|score(program, task)\l}", shape="record", style="solid"];
"ec.pregex.pregex.Alt" [color="black", fontcolor="black", label="{Alt|ps\lvalues\l|consume(s, state)\lflatten(char_map, escape_strings)\lleafNodes()\lsample(state)\l}", shape="record", style="solid"];
"ec.dreamcoder.program.Application" [color="black", fontcolor="black", label="{Application|annotatedType\lbranch : NoneType\lf\lfalseBranch : NoneType\lhashCode : NoneType\lisApplication\lisConditional\ltrueBranch : NoneType\lx\l|annotateTypes(context, environment)\lapplicationParse()\lapplicationParses()\lbetaReduce()\lclone()\levaluate(environment)\lfreeVariables()\linferType(context, environment, freeVariables)\lisBetaLong()\lshift(offset, depth)\lshow(isFunction)\lsize()\lsubstitute(old, new)\lvisit(visitor)\lwalk(surroundingAbstractions)\lwalkUncurried(d)\l}", shape="record", style="solid"];
"ec.dreamcoder.vs.VersionTable.bestInventions.B" [color="black", fontcolor="black", label="{B|defaultCost\ldefaultFunctionCost\ldomain\lfunctionDomain\lrelativeCost : dict\lrelativeFunctionCost : dict\l|getCost(given)\lgetFunctionCost(given)\lrelax(given, cost)\lrelaxFunction(given, cost)\lrestrict()\lunobject()\l}", shape="record", style="solid"];
"ec.bin.graphs.Bunch" [color="black", fontcolor="black", label="{Bunch|\l|}", shape="record", style="solid"];
"ec.bin.taskRankGraphs.Bunch" [color="black", fontcolor="black", label="{Bunch|\l|}", shape="record", style="solid"];
"ec.dreamcoder.utilities.Bunch" [color="black", fontcolor="black", label="{Bunch|\l|}", shape="record", style="solid"];
"ec.dreamcoder.domains.misc.RobustFillPrimitives.CPrimitive" [color="black", fontcolor="black", label="{CPrimitive|constraint : tuple, NoneType\l|}", shape="record", style="solid"];
"ec.dreamcoder.fragmentUtilities.CanonicalVisitor" [color="black", fontcolor="black", label="{CanonicalVisitor|mapping : dict\lnumberOfAbstractions : int\l|abstraction(e, d)\lapplication(e, d)\lfragmentVariable(e, d)\lindex(e, d)\linvented(e, d)\lprimitive(e, d)\l}", shape="record", style="solid"];
"ec.pregex.pregex.CharacterClass" [color="black", fontcolor="black", label="{CharacterClass|name\lvalues\l|consume(s, state)\lflatten(char_map, escape_strings)\lsample(state)\l}", shape="record", style="solid"];
"ec.dreamcoder.differentiation.Clamp" [color="black", fontcolor="black", label="{Clamp|l\lname : str\lu\l|backward(x)\lforward(x)\l}", shape="record", style="solid"];
"ec.dreamcoder.utilities.UnionFind.Class" [color="black", fontcolor="black", label="{Class|leader : NoneType\lmembers : set\l|chase()\l}", shape="record", style="solid"];
"ec.dreamcoder.vs.CloseInventionVisitor" [color="black", fontcolor="black", label="{CloseInventionVisitor|mapping\lp\l|abstraction(e, d)\lapplication(e, d)\lexecute()\lindex(e, d)\linvented(e, d)\lprimitive(e, d)\l}", shape="record", style="solid"];
"ec.dreamcoder.utilities.CompiledTimeout" [color="black", fontcolor="red", label="{CompiledTimeout|\l|}", shape="record", style="solid"];
"ec.pregex.pregex.Concat" [color="black", fontcolor="black", label="{Concat|values\l|consume(s, state)\lflatten(char_map, escape_strings)\lleafNodes()\lsample(state)\l}", shape="record", style="solid"];
"ec.dreamcoder.utilities.ConstantFunction" [color="black", fontcolor="black", label="{ConstantFunction|v\l|}", shape="record", style="solid"];
"ec.dreamcoder.domains.regex.main.ConstantInstantiateVisitor" [color="black", fontcolor="black", label="{ConstantInstantiateVisitor|regexes : list\l|abstraction(e)\lapplication(e)\lindex(e)\linvented(e)\lprimitive(e)\l}", shape="record", style="solid"];
"ec.dreamcoder.domains.text.main.ConstantInstantiateVisitor" [color="black", fontcolor="black", label="{ConstantInstantiateVisitor|words\l|abstraction(e)\lapplication(e)\lindex(e)\linvented(e)\lprimitive(e)\l}", shape="record", style="solid"];
"ec.bin.examineFrontier.ConstantVisitor" [color="black", fontcolor="black", label="{ConstantVisitor|const\l|abstraction(e)\lapplication(e)\lindex(e)\linvented(e)\lprimitive(e)\l}", shape="record", style="solid"];
"ec.dreamcoder.domains.misc.RobustFillPrimitives.Constraint_prop" [color="black", fontcolor="black", label="{Constraint_prop|\l|application(p)\lexecute(p)\lprimitive(p)\l}", shape="record", style="solid"];
"ec.dreamcoder.type.Context" [color="black", fontcolor="black", label="{Context|nextVariable : int\lsubstitution : list\l|extend(j, t)\lmakeVariable()\lunify(t1, t2)\l}", shape="record", style="solid"];
"ec.dreamcoder.grammar.ContextualGrammar" [color="black", fontcolor="black", label="{ContextualGrammar|continuationType\llibrary\lnoParent\lprimitives\lproductions\lvariableParent\l|closedLikelihoodSummary(request, expression)\lenumerateApplication(context, environment, function, argumentRequests, upperBound, lowerBound, maximumDepth, parent, originalFunction, argumentIndex)\lenumeration(context, environment, request, upperBound, parent, parentIndex, maximumDepth, lowerBound)\lexpectedUsesMonteCarlo(request, debug)\lfeatureVector(_, requests, onlyInventions, normalize)\lfromGrammar(g)\ljson()\llikelihoodSummary(parent, parentIndex, context, environment, request, expression)\llogLikelihood(request, expression)\lrandomWeights(r)\lsample(request, maximumDepth, maxAttempts)\luntorch()\l}", shape="record", style="solid"];
"ec.dreamcoder.recognition.ContextualGrammarNetwork" [color="black", fontcolor="black", label="{ContextualGrammarNetwork|grammar\llibrary : dict\ln_grammars : int\lnetwork : Linear\l|batchedLogLikelihoods(xs, summaries)\lforward(x)\lgrammarFromVector(logProductions)\l}", shape="record", style="solid"];
"ec.dreamcoder.recognition.ContextualGrammarNetwork_LowRank" [color="black", fontcolor="black", label="{ContextualGrammarNetwork_LowRank|R : int\lgrammar\llibrary : dict\ln_grammars : int\ltransitionMatrix\l|batchedLogLikelihoods(xs, summaries)\lforward(x)\lgrammarFromVector(logProductions)\lvectorizedLogLikelihoods(x, summaries)\l}", shape="record", style="solid"];
"ec.dreamcoder.recognition.ContextualGrammarNetwork_Mask" [color="black", fontcolor="black", label="{ContextualGrammarNetwork_Mask|grammar\llibrary : dict\ln_grammars : int\l|batchedLogLikelihoods(xs, summaries)\lforward(x)\lgrammarFromVector(logProductions)\ltransitionMatrix(x)\l}", shape="record", style="solid"];
"ec.dreamcoder.utilities.Curried" [color="black", fontcolor="black", label="{Curried|arguments : list, NoneType\larity : NoneType\lf\l|}", shape="record", style="solid"];
"ec.dreamcoder.differentiation.DN" [color="black", fontcolor="black", label="{DN|arguments\ldata : NoneType\lderivative\ldescendents : list\lgradient : NoneType, float\l|backPropagation()\lclamp(l, u)\ldifferentiate()\lexp()\lgradientDescent(parameters, _, lr, steps, update)\llightweightRecalculate()\llog()\lnumericallyVerifyGradients(parameters)\lrecalculate()\lrecursivelyDifferentiate()\lresilientBackPropagation(parameters, _, decay, grow, lr, steps, update)\lrestartingOptimize(parameters, _, attempts, s, decay, grow, lr, steps, update)\lsquare()\lupdateNetwork()\lzeroEverything()\l}", shape="record", style="solid"];
"ec.dreamcoder.taskBatcher.DefaultTaskBatcher" [color="black", fontcolor="black", label="{DefaultTaskBatcher|\l|getTaskBatch(ec_result, tasks, taskBatchSize, currIteration)\l}", shape="record", style="solid"];
"ec.dreamcoder.task.DifferentiableTask" [color="black", fontcolor="black", label="{DifferentiableTask|BIC : float\lactualParameters : NoneType\llikelihoodThreshold : NoneType\lloss : NoneType\lmaxParameters : NoneType\lspecialTask : tuple\ltemperature : float\l|logLikelihood(e, timeout)\l}", shape="record", style="solid"];
"ec.dreamcoder.differentiation.Division" [color="black", fontcolor="black", label="{Division|name : str\l|backward(x, y)\lforward(x, y)\l}", shape="record", style="solid"];
"ec.dreamcoder.recognition.DummyFeatureExtractor" [color="black", fontcolor="black", label="{DummyFeatureExtractor|outputDimensionality : int\lrecomputeTasks : bool\l|featuresOfTask(t)\lfeaturesOfTasks(ts)\ltaskOfProgram(p, t)\l}", shape="record", style="solid"];
"ec.dreamcoder.dreamcoder.ECResult" [color="black", fontcolor="black", label="{ECResult|abbreviations : dict\lallFrontiers : dict\laverageDescriptionLength : list\lfrontiersOverTime : dict\lgrammars : list\lhitsAtEachWake : list\llearningCurve : list\lnumTestingTasks : NoneType\lparameters : NoneType\lrecognitionModel : NoneType\lrecognitionTaskMetrics : dict\lsearchTimes : list\lsumMaxll : list\ltaskSolutions : dict\ltestSearchTime : dict\ltestingSearchTime : list\ltestingSumMaxll : list\ltimesAtEachWake : list\ltrainSearchTime : dict\l|abbreviate(parameter)\lclearRecognitionModel(path)\lgetTestingTasks()\lparameterOfAbbreviation(abbreviation)\lrecordFrontier(frontier)\l}", shape="record", style="solid"];
"ec.pregex.test_pregex.Empty" [color="black", fontcolor="black", label="{Empty|\l|match(string, state)\lsample(state)\l}", shape="record", style="solid"];
"ec.dreamcoder.recognition.Entropy" [color="black", fontcolor="black", label="{Entropy|\l|forward(x)\l}", shape="record", style="solid"];
"ec.dreamcoder.enumeration.EnumerationTimeout" [color="black", fontcolor="red", label="{EnumerationTimeout|\l|}", shape="record", style="solid"];
"ec.dreamcoder.program.EtaExpandFailure" [color="black", fontcolor="red", label="{EtaExpandFailure|\l|}", shape="record", style="solid"];
"ec.dreamcoder.program.EtaLongVisitor" [color="black", fontcolor="black", label="{EtaLongVisitor|context : NoneType\lrequest : NoneType\l|abstraction(e, request, environment)\lapplication(e, request, environment)\lexecute(e)\lindex(e, request, environment)\linvented(e, request, environment)\lmakeLong(e, request)\lprimitive(e, request, environment)\l}", shape="record", style="solid"];
"ec.dreamcoder.likelihoodModel.EuclideanLikelihoodModel" [color="black", fontcolor="black", label="{EuclideanLikelihoodModel|extract\lsuccessCutoff : float\l|score(program, task)\l}", shape="record", style="solid"];
"ec.dreamcoder.task.EvaluationTimeout" [color="black", fontcolor="red", label="{EvaluationTimeout|\l|}", shape="record", style="solid"];
"ec.dreamcoder.differentiation.Exponentiation" [color="black", fontcolor="black", label="{Exponentiation|name : str\l|backward(x)\lforward(x)\l}", shape="record", style="solid"];
"ec.dreamcoder.likelihoodModel.FeatureDiscriminatorLikelihoodModel" [color="black", fontcolor="black", label="{FeatureDiscriminatorLikelihoodModel|W : Linear\lextract\loutput : Linear\lsuccessCutoff : float\ltrainingSuccessRatio : float\l|forward(examples)\lscore(program, task)\ltrain(tasks, steps)\l}", shape="record", style="solid"];
"ec.bin.rational.FeatureExtractor" [color="black", fontcolor="black", label="{FeatureExtractor|recomputeTasks : bool\lspecial : str\ltasks\l|featuresOfTask(t)\ltaskOfProgram(p, t)\l}", shape="record", style="solid"];
"ec.dreamcoder.recognition.Flatten" [color="black", fontcolor="black", label="{Flatten|\l|forward(x)\l}", shape="record", style="solid"];
"ec.dreamcoder.domains.logo.main.Flatten" [color="black", fontcolor="black", label="{Flatten|\l|forward(x)\l}", shape="record", style="solid"];
"ec.dreamcoder.domains.tower.main.Flatten" [color="black", fontcolor="black", label="{Flatten|\l|forward(x)\l}", shape="record", style="solid"];
"ec.pregex.test_pregex.Foobar" [color="black", fontcolor="black", label="{Foobar|\l|match(string, state)\lsample(state)\l}", shape="record", style="solid"];
"ec.dreamcoder.fragmentGrammar.FragmentGrammar" [color="black", fontcolor="black", label="{FragmentGrammar|likelihoodCache : dict\llogVariable\lprimitives\lproductions\l|buildCandidates(context, environment, request)\lclearCache()\lclosedUses(request, expression)\lexpectedUses(frontiers)\lfromGrammar(g)\linduceFromFrontiers(g0, frontiers, _, topK, topk_use_only_likelihood, pseudoCounts, aic, structurePenalty, a, CPUs)\linsideOutside(frontiers, pseudoCounts)\ljointFrontiersLikelihood(frontiers)\ljointFrontiersMDL(frontiers, CPUs)\llogLikelihood(request, expression)\lmakeUniform()\lnormalize()\lrescoreFrontier(frontier)\ltoGrammar()\luniform(productions)\l}", shape="record", style="solid"];
"ec.dreamcoder.program.FragmentVariable" [color="black", fontcolor="black", label="{FragmentVariable|\l|betaReduce()\levaluate(e)\linferType(context, environment, freeVariables)\lmatch(context, expression, holes, variableBindings, environment)\lshift(offset, depth)\lshow(isFunction)\lsize()\lsubstitute(old, new)\lvisit(visitor)\lwalk(surroundingAbstractions)\lwalkUncurried(d)\l}", shape="record", style="solid"];
"ec.dreamcoder.frontier.Frontier" [color="black", fontcolor="black", label="{Frontier|DUMMYFRONTIERCOUNTER : int\lbestPosterior\lbestll\lempty\lentries\ltask\l|combine(other, tolerance)\ldescribe(frontiers)\ldummy(program, logLikelihood, logPrior, tp)\lexpectedProductionUses(g)\ljson()\lmakeEmpty(task)\lmarginalLikelihood()\lnormalize()\lremoveZeroLikelihood()\lreplaceWithSupervised(g)\lsample()\lstrip_primitive_values()\lsummarize()\lsummarizeFull()\ltemperature(T)\ltopK(k)\lunstrip_primitive_values()\l}", shape="record", style="solid"];
"ec.dreamcoder.frontier.FrontierEntry" [color="black", fontcolor="black", label="{FrontierEntry|logLikelihood : NoneType\llogPosterior : NoneType\llogPrior : NoneType\lprogram\l|strip_primitive_values()\lunstrip_primitive_values()\l}", shape="record", style="solid"];
"ec.dreamcoder.grammar.Grammar" [color="black", fontcolor="black", label="{Grammar|continuationType : NoneType\lexpression2likelihood : dict\llogVariable\lprimitives\lproductions\l|bestFirstEnumeration(request)\lbuildCandidates(request, context, environment, normalize, returnTable, returnProbabilities, mustBeLeaf)\lclosedLikelihoodSummary(request, expression, silent)\lenumerateApplication(context, environment, function, argumentRequests, upperBound, lowerBound, maximumDepth, originalFunction, argumentIndex)\lenumerateHoles(request, expr, k, return_obj)\lenumerateNearby(request, expr, distance)\lenumeration(context, environment, request, upperBound, maximumDepth, lowerBound)\lfromProductions(productions, logVariable, continuationType)\lfrontierMDL(frontier)\linsideOutside(frontiers, pseudoCounts, iterations)\ljson()\llikelihoodSummary(context, environment, request, expression, silent)\llogLikelihood(request, expression)\lproductionUses(frontiers)\lrandomWeights(r)\lremoveProductions(ps)\lrescoreFrontier(frontier)\lsample(request, maximumDepth, maxAttempts)\lsketchApplication(context, environment, function, arguments, argumentRequests, upperBound, lowerBound, maximumDepth)\lsketchEnumeration(context, environment, request, sk, upperBound, maximumDepth, lowerBound)\lsketchLogLikelihood(request, full, sk, context, environment)\lsketchllApplication(context, environment, sk_function, sk_arguments, full_function, full_arguments, argumentRequests)\lstrip_primitive_values()\luniform(primitives, continuationType)\lunstrip_primitive_values()\luntorch()\l}", shape="record", style="solid"];
"ec.dreamcoder.grammar.GrammarFailure" [color="black", fontcolor="red", label="{GrammarFailure|\l|}", shape="record", style="solid"];
"ec.dreamcoder.recognition.GrammarNetwork" [color="black", fontcolor="black", label="{GrammarNetwork|grammar\llogProductions : Linear\l|batchedLogLikelihoods(xs, summaries)\lforward(x)\l}", shape="record", style="solid"];
"ec.dreamcoder.recognition.RecognitionModel.train.HelmholtzEntry" [color="black", fontcolor="black", label="{HelmholtzEntry|frontier\lowner\lprograms\lrequest\ltask : NoneType\l|calculateTask()\lclear()\lmakeFrontier()\l}", shape="record", style="solid"];
"ec.dreamcoder.program.Hole" [color="black", fontcolor="black", label="{Hole|isHole\l|betaReduce()\levaluate(e)\linferType(context, environment, freeVariables)\lshift(offset, depth)\lshow(isFunction)\lsize()\lwalk(surroundingAbstractions)\lwalkUncurried(d)\l}", shape="record", style="solid"];
"ec.dreamcoder.recognition.ImageFeatureExtractor" [color="black", fontcolor="black", label="{ImageFeatureExtractor|channels : int\lencoder : Sequential\linputImageDimension\loutputDimensionality : int\lresizedDimension\l|forward(v)\l}", shape="record", style="solid"];
"ec.bin.image_robustfill.Image_RobustFill" [color="black", fontcolor="black", label="{Image_RobustFill|V : Linear\lW : Linear\lbatch_norm1 : BatchNorm2d\lbatch_norm2 : BatchNorm2d\lcell_type : str\lconv1 : Conv2d\lconv2 : Conv2d\lconv3 : Conv2d\lconv4 : Conv2d\ldecoder_cell : GRUCell, LSTMCell\ldecoder_init_c : Parameter\lembedding_size : int\lencoder_init_h : Parameter\lfc_loc : Linear\lh_to_32_linear : Linear\lhidden_size : int\limg_feat_to_context : Sequential\limg_feat_to_embedding : Sequential\limg_to_32 : Linear\linput_vocabularies : list\ln_encoders : int\lno_inputs : bool\lopt : Adam\ltarget_vocabulary\ltarget_vocabulary_index\lv_inputs : NoneType\lv_target\l|cpu()\lcuda()\loptimiser_step(batch_inputs, batch_target)\lsample(batch_inputs, n_samples)\lsampleAndScore(batch_inputs, n_samples, nRepeats)\lscore(batch_inputs, batch_target, autograd)\lwith_target_vocabulary(target_vocabulary)\l}", shape="record", style="solid"];
"ec.dreamcoder.program.Index" [color="black", fontcolor="black", label="{Index|annotatedType\li\lisIndex\l|annotateTypes(context, environment)\lbetaReduce()\lbound(surroundingAbstractions)\lclone()\levaluate(environment)\lfree(surroundingAbstractions)\lfreeVariables()\linferType(context, environment, freeVariables)\lisBetaLong()\lshift(offset, depth)\lshow(isFunction)\lsize()\lsubstitute(old, new)\lvisit(visitor)\lwalk(surroundingAbstractions)\lwalkUncurried(d)\l}", shape="record", style="solid"];
"ec.dreamcoder.program.InferenceFailure" [color="black", fontcolor="red", label="{InferenceFailure|\l|}", shape="record", style="solid"];
"ec.dreamcoder.differentiation.InvalidLoss" [color="black", fontcolor="red", label="{InvalidLoss|\l|}", shape="record", style="solid"];
"ec.dreamcoder.program.Invented" [color="black", fontcolor="black", label="{Invented|annotatedType\lbody\lhashCode : NoneType\lisInvented\ltp\l|annotateTypes(context, environment)\lbetaReduce()\lclone()\levaluate(e)\lfreeVariables()\linferType(context, environment, freeVariables)\lisBetaLong()\lshift(offset, depth)\lshow(isFunction)\lsize()\lsubstitute(old, new)\lvisit(visitor)\lwalk(surroundingAbstractions)\lwalkUncurried(d)\l}", shape="record", style="solid"];
"ec.dreamcoder.recognition.JSONFeatureExtractor" [color="black", fontcolor="black", label="{JSONFeatureExtractor|cuda\ltasks\l|featuresOfTask(t)\lstringify(x)\l}", shape="record", style="solid"];
"ec.pregex.pregex.KleeneStar" [color="black", fontcolor="black", label="{KleeneStar|p\lval\l|consume(s, state)\lflatten(char_map, escape_strings)\lleafNodes()\lsample(state)\l}", shape="record", style="solid"];
"ec.dreamcoder.grammar.ContextualGrammar.LS" [color="black", fontcolor="black", label="{LS|library\lnoParent\lvariableParent\l|denominator(owner)\ljoin(other)\llogLikelihood(owner)\lnumerator(owner)\lrecord(parent, parentIndex, actual, possibles, constant)\l}", shape="record", style="solid"];
"ec.dreamcoder.differentiation.LSE" [color="black", fontcolor="black", label="{LSE|name : str\l|backward()\lforward()\l}", shape="record", style="solid"];
"ec.bin.scientificLaws.LearnedFeatureExtractor" [color="black", fontcolor="black", label="{LearnedFeatureExtractor|\l|featuresOfProgram(p, tp)\ltokenize(examples)\l}", shape="record", style="solid"];
"ec.dreamcoder.domains.list.main.LearnedFeatureExtractor" [color="black", fontcolor="black", label="{LearnedFeatureExtractor|H : int\llexicon\lmaximumLength : float\lrecomputeTasks : bool\lspecial : NoneType\l|tokenize(examples)\l}", shape="record", style="solid"];
"ec.dreamcoder.domains.regex.main.LearnedFeatureExtractor" [color="black", fontcolor="black", label="{LearnedFeatureExtractor|H : int\llexicon\lmaximumLength\lnum_examples_list\lparallelTaskOfProgram : bool\lspecial : str\l|taskOfProgram(p, t)\ltokenize(examples)\l}", shape="record", style="solid"];
"ec.dreamcoder.domains.text.main.LearnedFeatureExtractor" [color="black", fontcolor="black", label="{LearnedFeatureExtractor|MAXINPUTS : int\lrecomputeTasks : bool\lspecial : str\l|taskOfProgram(p, tp)\ltokenize(examples)\l}", shape="record", style="solid"];
"ec.dreamcoder.grammar.LikelihoodSummary" [color="black", fontcolor="black", label="{LikelihoodSummary|constant : float\lnormalizers : dict\luses : dict\l|denominator(grammar)\ljoin(other)\llogLikelihood(grammar)\llogLikelihood_overlyGeneral(grammar)\lnumerator(grammar)\lrecord(actual, possibles, constant)\ltoUses()\l}", shape="record", style="solid"];
"ec.dreamcoder.differentiation.Logarithm" [color="black", fontcolor="black", label="{Logarithm|name : str\l|backward(x)\lforward(x)\l}", shape="record", style="solid"];
"ec.dreamcoder.domains.logo.main.LogoFeatureCNN" [color="black", fontcolor="black", label="{LogoFeatureCNN|encoder : Sequential\linputImageDimension : int\loutputDimensionality : int\lrecomputeTasks : bool\lresizedDimension : int\lspecial : str\lsub\l|featuresOfTask(t)\lforward(v)\ltaskOfProgram(p, t)\ltasksOfPrograms(ps, types)\l}", shape="record", style="solid"];
"ec.dreamcoder.recognition.LowRank" [color="black", fontcolor="black", label="{LowRank|A : Linear\lB : Linear\lM : Linear\lfactored : bool\lm\ln\lr\l|forward(x)\l}", shape="record", style="solid"];
"ec.dreamcoder.fragmentUtilities.MatchFailure" [color="black", fontcolor="red", label="{MatchFailure|\l|}", shape="record", style="solid"];
"ec.dreamcoder.fragmentUtilities.Matcher" [color="black", fontcolor="black", label="{Matcher|context\lvariableBindings : dict\l|abstraction(fragment, expression, environment, numberOfArguments)\lapplication(fragment, expression, environment, numberOfArguments)\lfragmentVariable(fragment, expression, environment, numberOfArguments)\lindex(fragment, expression, environment, numberOfArguments)\linvented(fragment, expression, environment, numberOfArguments)\lmatch(context, fragment, expression, numberOfArguments)\lprimitive(fragment, expression, environment, numberOfArguments)\l}", shape="record", style="solid"];
"ec.pregex.pregex.Maybe" [color="black", fontcolor="black", label="{Maybe|p\lval\l|consume(s, state)\lflatten(char_map, escape_strings)\lleafNodes()\lsample(state)\l}", shape="record", style="solid"];
"ec.dreamcoder.differentiation.Multiplication" [color="black", fontcolor="black", label="{Multiplication|name : str\l|backward(x, y)\lforward(x, y)\l}", shape="record", style="solid"];
"ec.dreamcoder.type.MutableContext" [color="black", fontcolor="black", label="{MutableContext|substitution : list\l|extend(i, t)\lmakeVariable()\lunify(t1, t2)\l}", shape="record", style="solid"];
"ec.dreamcoder.program.Mutator" [color="black", fontcolor="black", label="{Mutator|fn\lgrammar\lhistory : list\l|abstraction(e, tp, env, is_lhs)\lapplication(e, tp, env, is_lhs)\lenclose(expr)\lexecute(e, tp)\lindex(e, tp, env, is_lhs)\linvented(e, tp, env, is_lhs)\llogLikelihood(tp, e, env)\lprimitive(e, tp, env, is_lhs)\l}", shape="record", style="solid"];
"ec.dreamcoder.domains.regex.main.MyJSONFeatureExtractor" [color="black", fontcolor="black", label="{MyJSONFeatureExtractor|N_EXAMPLES : int\l|}", shape="record", style="solid"];
"ec.dreamcoder.differentiation.Negation" [color="black", fontcolor="black", label="{Negation|name : str\l|backward(x)\lforward(x)\l}", shape="record", style="solid"];
"ec.dreamcoder.deprecated.network.Network" [color="black", fontcolor="black", label="{Network|V : Linear\lW : Linear\lcell_type : str\ldecoder_cell : GRUCell, LSTMCell\ldecoder_init_c : Parameter\lembedding_size : int\lh_decoder_size : int\lh_input_encoder_size : int\lh_output_encoder_size : int\linput_A : Bilinear\linput_EOS : Parameter\linput_encoder_cell : LSTMCell, GRUCell\linput_encoder_init : ParameterList, Parameter\linput_vocabulary\lopt : Adam\loutput_A : Bilinear\loutput_EOS : Parameter\loutput_encoder_cell : LSTMCell, GRUCell\loutput_encoder_init_c : Parameter\ltarget_EOS : Parameter\ltarget_vocabulary\lv_input\lv_target\l|cell_get_h(cell_state)\lclear_optimiser()\ldecoder_get_init(output_encoder_h)\lget_optimiser()\linput_encoder_get_init(batch_size)\linputsToTensors(inputss)\loptimiser_step(inputs, outputs, target)\loutput_encoder_get_init(input_encoder_h)\lrun(inputs, outputs, target, mode)\lsample(inputs, outputs)\lsampleAndScore(inputs, outputs, nRepeats)\lscore(inputs, outputs, target, autograd)\lset_target_vocabulary(target_vocabulary)\ltargetToTensor(targets)\ltensorToOutput(tensor)\l}", shape="record", style="solid"];
"ec.dreamcoder.grammar.NoCandidates" [color="black", fontcolor="red", label="{NoCandidates|\l|}", shape="record", style="solid"];
"ec.pregex.pregex.NonEmpty" [color="black", fontcolor="black", label="{NonEmpty|\l|consume(s, state)\l}", shape="record", style="solid"];
"ec.dreamcoder.type.Occurs" [color="black", fontcolor="red", label="{Occurs|\l|}", shape="record", style="solid"];
"ec.dreamcoder.utilities.PQ" [color="black", fontcolor="black", label="{PQ|h : list\lindex2value : dict\lnextIndex : int\l|popMaximum()\lpush(priority, v)\l}", shape="record", style="solid"];
"ec.dreamcoder.domains.regex.regexPrimitives.PRC" [color="black", fontcolor="black", label="{PRC|args : list\larity : int\lf\l|}", shape="record", style="solid"];
"ec.pregex.pregex.ParseException" [color="black", fontcolor="red", label="{ParseException|\l|}", shape="record", style="solid"];
"ec.dreamcoder.utilities.ParseFailure" [color="black", fontcolor="red", label="{ParseFailure|\l|}", shape="record", style="solid"];
"ec.bin.physics.Particle" [color="black", fontcolor="black", label="{Particle|m\lv\lx\l|json()\lstep(f, dt)\l}", shape="record", style="solid"];
"ec.dreamcoder.differentiation.Placeholder" [color="black", fontcolor="black", label="{Placeholder|data : float\lname : NoneType, str\l|backward()\lforward()\lmaybe(x)\lnamed(namePrefix, initialValue)\l}", shape="record", style="solid"];
"ec.dreamcoder.task.PlaceholderVisitor" [color="black", fontcolor="black", label="{PlaceholderVisitor|parameters : list\l|abstraction(e)\lapplication(e)\lexecute(e)\lindex(e)\linvented(e)\lprimitive(e)\l}", shape="record", style="solid"];
"ec.pregex.pregex.Plus" [color="black", fontcolor="black", label="{Plus|p\lval\l|consume(s, state)\lflatten(char_map, escape_strings)\lleafNodes()\lsample(state)\l}", shape="record", style="solid"];
"ec.pregex.pregex.Pregex" [color="black", fontcolor="black", label="{Pregex|\l|consume(s, state)\lflatten(char_map, escape_strings)\lleafNodes()\lmatch(string, state, mergeState, returnPartials)\lsample(state)\lstr(f, escape_strings)\l}", shape="record", style="solid"];
"ec.dreamcoder.program.PrettyVisitor" [color="black", fontcolor="black", label="{PrettyVisitor|Lisp : bool\lfreeVariables : dict\lnumberOfVariables : int\ltoplevel : bool\lvariableNames : list\l|abstraction(e, environment, isFunction, isAbstraction)\lapplication(e, environment, isFunction, isAbstraction)\lindex(e, environment, isVariable, isAbstraction)\linvented(e, environment, isFunction, isAbstraction)\lmakeVariable()\lprimitive(e, environment, isVariable, isAbstraction)\l}", shape="record", style="solid"];
"ec.dreamcoder.program.Primitive" [color="black", fontcolor="black", label="{Primitive|GLOBALS : dict\lannotatedType\lisPrimitive\lname\ltp\lvalue\l|annotateTypes(context, environment)\lbetaReduce()\lclone()\levaluate(environment)\lfreeVariables()\linferType(context, environment, freeVariables)\lisBetaLong()\lshift(offset, depth)\lshow(isFunction)\lsize()\lsubstitute(old, new)\lvisit(visitor)\lwalk(surroundingAbstractions)\lwalkUncurried(d)\l}", shape="record", style="solid"];
"ec.dreamcoder.likelihoodModel.ProbabilisticLikelihoodModel" [color="black", fontcolor="black", label="{ProbabilisticLikelihoodModel|timeout\l|score(program, task)\l}", shape="record", style="solid"];
"ec.dreamcoder.program.Program" [color="black", fontcolor="black", label="{Program|closed\lisAbstraction\lisApplication\lisHole\lisIndex\lisInvented\lisPrimitive\lisUnion\lnumberOfFreeVariables\l|applicationParse()\lapplicationParses()\lbetaNormalForm()\lcanHaveType(t)\lfreeVariables()\linfer()\lparse(s)\lparseConstant(s, n)\lparseHumanReadable(s)\lrunWithArguments(xs)\luncurry()\lwellTyped()\l}", shape="record", style="solid"];
"ec.dreamcoder.vs.VersionTable.rewriteWithInvention.RW" [color="black", fontcolor="black", label="{RW|a\lac\lf\lfc\l|}", shape="record", style="solid"];
"ec.dreamcoder.recognition.RandomFeatureExtractor" [color="black", fontcolor="black", label="{RandomFeatureExtractor|outputDimensionality : int\lrecomputeTasks : bool\l|featuresOfTask(t)\lfeaturesOfTasks(ts)\ltaskOfProgram(p, t)\l}", shape="record", style="solid"];
"ec.dreamcoder.taskBatcher.RandomLowEntropykNNTaskBatcher" [color="black", fontcolor="black", label="{RandomLowEntropykNNTaskBatcher|\l|getTaskBatch(ec_result, tasks, taskBatchSize, currIteration)\l}", shape="record", style="solid"];
"ec.bin.rational.RandomParameterization" [color="black", fontcolor="black", label="{RandomParameterization|\l|abstraction(e)\lapplication(e)\lindex(e)\linvented(e)\lprimitive(e)\l}", shape="record", style="solid"];
"ec.dreamcoder.taskBatcher.RandomShuffleTaskBatcher" [color="black", fontcolor="black", label="{RandomShuffleTaskBatcher|baseSeed : int\l|getTaskBatch(ec_result, tasks, taskBatchSize, currIteration)\l}", shape="record", style="solid"];
"ec.dreamcoder.taskBatcher.RandomTaskBatcher" [color="black", fontcolor="black", label="{RandomTaskBatcher|\l|getTaskBatch(ec_result, tasks, taskBatchSize, currIteration)\l}", shape="record", style="solid"];
"ec.dreamcoder.taskBatcher.RandomkNNTaskBatcher" [color="black", fontcolor="black", label="{RandomkNNTaskBatcher|\l|getTaskBatch(ec_result, tasks, taskBatchSize, currIteration)\l}", shape="record", style="solid"];
"ec.dreamcoder.recognition.RecognitionModel" [color="black", fontcolor="black", label="{RecognitionModel|contextual : bool\lentropy\lfeatureExtractor\lgenerativeModel\lgrammar\lgrammarBuilder\lid : int\loutputDimensionality\ltrained : bool\luse_cuda : bool\l|auxiliaryLoss(frontier, features)\lauxiliaryPrimitiveEmbeddings()\lenumerateFrontiers(tasks, enumerationTimeout, testing, solver, CPUs, frontierSize, maximumFrontier, evaluationTimeout)\lforward(features)\lfrontierBiasOptimal(frontier, auxiliary, vectorized)\lfrontierKL(frontier, auxiliary, vectorized)\lgrammarEntropyOfTask(task)\lgrammarFeatureLogProductionsOfTask(task)\lgrammarLogProductionDistanceToTask(task, tasks)\lgrammarLogProductionsOfTask(task)\lgrammarOfTask(task)\lreplaceProgramsWithLikelihoodSummaries(frontier)\lsampleHelmholtz(requests, statusUpdate, seed)\lsampleManyHelmholtz(requests, N, CPUs)\ltaskAuxiliaryLossLayer(tasks)\ltaskEmbeddings(tasks)\ltaskGrammarEntropies(tasks)\ltaskGrammarFeatureLogProductions(tasks)\ltaskGrammarLogProductions(tasks)\ltaskGrammarStartProductions(tasks)\ltaskHiddenStates(tasks)\ltrain(frontiers, _, steps, lr, topK, CPUs, timeout, evaluationTimeout, helmholtzFrontiers, helmholtzRatio, helmholtzBatch, biasOptimal, defaultRequest, auxLoss, vectorized)\l}", shape="record", style="solid"];
"ec.dreamcoder.recognition.RecurrentFeatureExtractor" [color="black", fontcolor="black", label="{RecurrentFeatureExtractor|H : int\lMAXINPUTS : int\largumentsWithType\lbidirectional : bool\lencoder : Embedding\lendOfInputIndex\lendingIndex\lhelmholtzEvaluationTimeout : float\lhelmholtzTimeout : float\llexicon\lmodel : GRU\loutputDimensionality\lparallelTaskOfProgram : bool\lrequestToInputs\lrequestToNumberOfExamples\lspecialSymbols : list\lstartOfOutputIndex\lstartingIndex\lsymbolToIndex\luse_cuda : bool\l|examplesEncoding(examples)\lfeaturesOfTask(t)\lforward(examples)\lpackExamples(examples)\lsymbolEmbeddings()\ltaskOfProgram(p, tp)\ltokenize(x)\l}", shape="record", style="solid"];
"ec.dreamcoder.domains.list.listPrimitives.RecursionDepthExceeded" [color="black", fontcolor="red", label="{RecursionDepthExceeded|\l|}", shape="record", style="solid"];
"ec.dreamcoder.program.RegisterPrimitives" [color="black", fontcolor="black", label="{RegisterPrimitives|\l|abstraction(e)\lapplication(e)\lindex(e)\linvented(e)\lprimitive(e)\lregister(e)\l}", shape="record", style="solid"];
"ec.dreamcoder.program.ReplacePrimitiveValueVisitor" [color="black", fontcolor="black", label="{ReplacePrimitiveValueVisitor|\l|abstraction(e)\lapplication(e)\lindex(e)\linvented(e)\lprimitive(e)\l}", shape="record", style="solid"];
"ec.dreamcoder.fragmentUtilities.RewriteFragments" [color="black", fontcolor="black", label="{RewriteFragments|concrete\lfragment\l|abstraction(e, numberOfArguments)\lapplication(e, numberOfArguments)\lindex(e, numberOfArguments)\linvented(e, numberOfArguments)\lprimitive(e, numberOfArguments)\lrewrite(e)\lrewriteFrontier(frontier, fragment)\ltryRewrite(e, numberOfArguments)\l}", shape="record", style="solid"];
"ec.dreamcoder.vs.RewriteWithInventionVisitor" [color="black", fontcolor="black", label="{RewriteWithInventionVisitor|appliedInvention\linvention\lmapping\loriginal\l|abstraction(e)\lapplication(e)\lexecute(e, request)\lindex(e)\linvented(e)\lprimitive(e)\ltryRewrite(e)\l}", shape="record", style="solid"];
"ec.pinn.robustfill.RobustFill" [color="black", fontcolor="black", label="{RobustFill|As : ModuleList\lV : Linear\lW : Linear\lcell_type : str\ldecoder_cell : LSTMCell, GRUCell\ldecoder_init_c : Parameter\lembedding_size : int\lencoder_cells : ModuleList\lencoder_init_cs : ParameterList\lencoder_init_h : Parameter\lhidden_size : int\linput_vocabularies\linput_vocabularies_index\ln_encoders\lopt : Adam\ltarget_vocabulary\ltarget_vocabulary_index\lv_inputs\lv_target\l|cpu()\lcuda()\loptimiser_step(batch_inputs, batch_target)\lsample(batch_inputs)\lsampleAndScore(batch_inputs, nRepeats)\lscore(batch_inputs, batch_target, autograd)\lwith_target_vocabulary(target_vocabulary)\l}", shape="record", style="solid"];
"ec.dreamcoder.program.RunFailure" [color="black", fontcolor="red", label="{RunFailure|\l|}", shape="record", style="solid"];
"ec.dreamcoder.utilities.RunWithTimeout" [color="black", fontcolor="red", label="{RunWithTimeout|\l|}", shape="record", style="solid"];
"ec.dreamcoder.program.ShareVisitor" [color="black", fontcolor="black", label="{ShareVisitor|abstractionTable : dict\lapplicationTable : dict\lindexTable : dict\linventedTable : dict\lprimitiveTable : dict\l|abstraction(e)\lapplication(e)\lexecute(e)\lindex(e)\linvented(e)\lprimitive(e)\l}", shape="record", style="solid"];
"ec.dreamcoder.program.ShiftFailure" [color="black", fontcolor="red", label="{ShiftFailure|\l|}", shape="record", style="solid"];
"ec.dreamcoder.grammar.SketchEnumerationFailure" [color="black", fontcolor="red", label="{SketchEnumerationFailure|\l|}", shape="record", style="solid"];
"ec.dreamcoder.differentiation.Square" [color="black", fontcolor="black", label="{Square|name : str\l|backward(x)\lforward(x)\l}", shape="record", style="solid"];
"ec.dreamcoder.utilities.Stopwatch" [color="black", fontcolor="black", label="{Stopwatch|elapsed\lrunning : bool\l|start()\lstop()\l}", shape="record", style="solid"];
"ec.pregex.pregex.String" [color="black", fontcolor="black", label="{String|\l|consume(s, state)\lflatten(char_map, escape_strings)\lsample(state)\l}", shape="record", style="solid"];
"ec.dreamcoder.program.StripPrimitiveVisitor" [color="black", fontcolor="black", label="{StripPrimitiveVisitor|\l|abstraction(e)\lapplication(e)\lindex(e)\linvented(e)\lprimitive(e)\l}", shape="record", style="solid"];
"ec.dreamcoder.differentiation.Subtraction" [color="black", fontcolor="black", label="{Subtraction|name : str\l|backward(x, y)\lforward(x, y)\l}", shape="record", style="solid"];
"ec.dreamcoder.domains.tower.makeTowerTasks.SupervisedTower" [color="black", fontcolor="black", label="{SupervisedTower|cache\lexamples\lhand\lhandImage : NoneType\limage : NoneType\lmustTrain : bool\lname\loriginal\lplan\lrequest\lspecialTask : tuple\l|animate()\lexportImage(f, pretty, Lego, drawHand)\lexportMany(f, ts, shuffle, columns)\lgetImage(drawHand, pretty)\llogLikelihood(e, timeout)\lshowMany(ts)\l}", shape="record", style="solid"];
"ec.bin.syntax_robustfill.SyntaxCheckingRobustFill" [color="black", fontcolor="black", label="{SyntaxCheckingRobustFill|As : ModuleList\lV : Linear\lW : Linear\lcell_type : str\ldecoder_cell : GRUCell, LSTMCell\ldecoder_init_c : Parameter\lembedding_size : int\lencoder_cells : ModuleList\lencoder_init_cs : ParameterList\lencoder_init_h : Parameter\lhidden_size : int\linput_vocabularies\linput_vocabularies_index\lmax_length : int\ln_encoders\lno_inputs\lopt : Adam\lsyntax_V : Linear\lsyntax_W : Linear\lsyntax_decoder_cell : LSTMCell, GRUCell\lsyntax_decoder_init_c : Parameter\lsyntax_decoder_init_h : Parameter\lt : Parameter\ltarget_vocabulary\ltarget_vocabulary_index\lv_inputs\lv_target\l|attend_for_beam(i, j, h, H, attention_mask, max_length_inputs, batch_size)\lbeam_decode(batch_inputs, beam_size, vocab_filter, maxlen)\lcpu()\lcuda()\loptimiser_step(batch_inputs, batch_target, vocab_filter)\lsample(batch_inputs, n_samples, vocab_filter)\lsampleAndScore(batch_inputs, n_samples, nRepeats, autograd, vocab_filter)\lscore(batch_inputs, batch_target, autograd, vocab_filter)\lwith_target_vocabulary(target_vocabulary)\l}", shape="record", style="solid"];
"ec.dreamcoder.task.Task" [color="black", fontcolor="black", label="{Task|cache : bool\lexamples\lfeatures : NoneType\lname\lrequest\lsupervision\l|as_json_dict()\lcheck(e, timeout)\ldescribe()\lfeatureMeanAndStandardDeviation(tasks)\llogLikelihood(e, timeout)\lpredict(f, x)\l}", shape="record", style="solid"];
"ec.tests.test_compression.TestCompression" [color="black", fontcolor="black", label="{TestCompression|\l|test_imports()\l}", shape="record", style="solid"];
"ec.tests.test_dreaming.TestDreaming" [color="black", fontcolor="black", label="{TestDreaming|\l|test_imports()\l}", shape="record", style="solid"];
"ec.tests.test_dreamcoder.TestEcModule" [color="black", fontcolor="black", label="{TestEcModule|\l|test_imports()\l}", shape="record", style="solid"];
"ec.tests.test_enumeration.TestEnumerationMain" [color="black", fontcolor="black", label="{TestEnumerationMain|\l|test_multicore_enumeration_invalid_response_error(mock_subprocess)\ltest_multicore_enumeration_multiple_tasks(mock_subprocess)\ltest_multicore_enumeration_no_tasks()\ltest_multicore_enumeration_single_task(mock_subprocess)\l}", shape="record", style="solid"];
"ec.tests.test_fragmentGrammar.TestFragmentGrammar" [color="black", fontcolor="black", label="{TestFragmentGrammar|\l|test_imports()\l}", shape="record", style="solid"];
"ec.tests.test_list.TestListMain" [color="black", fontcolor="black", label="{TestListMain|\l|test_imports()\l}", shape="record", style="solid"];
"ec.tests.test_logo.TestLogoMain" [color="black", fontcolor="black", label="{TestLogoMain|\l|test_imports()\l}", shape="record", style="solid"];
"ec.tests.test_recognition.TestRecognition" [color="black", fontcolor="black", label="{TestRecognition|\l|test_imports()\l}", shape="record", style="solid"];
"ec.tests.test_regexes.TestRegexesMain" [color="black", fontcolor="black", label="{TestRegexesMain|\l|test_imports()\l}", shape="record", style="solid"];
"ec.tests.test_symmetryBreaking.TestSymmetryBreaking" [color="black", fontcolor="black", label="{TestSymmetryBreaking|\l|test_imports()\l}", shape="record", style="solid"];
"ec.tests.test_text.TestTextMain" [color="black", fontcolor="black", label="{TestTextMain|\l|test_imports()\l}", shape="record", style="solid"];
"ec.tests.test_tower.TestTowerMain" [color="black", fontcolor="black", label="{TestTowerMain|\l|test_imports()\l}", shape="record", style="solid"];
"ec.dreamcoder.utilities.Thunk" [color="black", fontcolor="black", label="{Thunk|evaluated : bool\lthing\l|force()\l}", shape="record", style="solid"];
"ec.dreamcoder.program.TokeniseVisitor" [color="black", fontcolor="black", label="{TokeniseVisitor|\l|abstraction(e)\lapplication(e)\lindex(e)\linvented(e)\lprimitive(e)\l}", shape="record", style="solid"];
"ec.dreamcoder.domains.tower.main.TowerCNN" [color="black", fontcolor="black", label="{TowerCNN|CUDA : bool\lencoder : Sequential\linputImageDimension : int\loutputDimensionality : int\lrecomputeTasks : bool\lresizedDimension : int\lspecial : str\l|featuresOfTask(t, t2)\lfeaturesOfTasks(ts, t2)\lforward(v, v2)\ltaskOfProgram(p, t, lenient)\l}", shape="record", style="solid"];
"ec.dreamcoder.domains.tower.towerPrimitives.TowerContinuation" [color="black", fontcolor="black", label="{TowerContinuation|h\lw\lx\l|}", shape="record", style="solid"];
"ec.dreamcoder.domains.tower.towerPrimitives.TowerState" [color="black", fontcolor="black", label="{TowerState|hand : int\lhistory : NoneType\lorientation : int\l|left(n)\lmove(n)\lrecordBlock(b)\lreverse()\lright(n)\l}", shape="record", style="solid"];
"ec.dreamcoder.type.Type" [color="black", fontcolor="black", label="{Type|\l|fromjson(j)\l}", shape="record", style="solid"];
"ec.dreamcoder.type.TypeConstructor" [color="black", fontcolor="black", label="{TypeConstructor|arguments\lisPolymorphic\lname\l|apply(context)\lapplyMutable(context)\lcanonical(bindings)\lfunctionArguments()\linstantiate(context, bindings)\linstantiateMutable(context, bindings)\lisArrow()\ljson()\lmakeDummyMonomorphic(mapping)\lnegateVariables()\loccurs(v)\lreturns()\lshow(isReturn)\l}", shape="record", style="solid"];
"ec.dreamcoder.type.TypeVariable" [color="black", fontcolor="black", label="{TypeVariable|isPolymorphic : bool\lv\l|apply(context)\lapplyMutable(context)\lcanonical(bindings)\lfunctionArguments()\linstantiate(context, bindings)\linstantiateMutable(context, bindings)\lisArrow()\ljson()\lmakeDummyMonomorphic(mapping)\lnegateVariables()\loccurs(v)\lreturns()\lshow(_)\l}", shape="record", style="solid"];
"ec.dreamcoder.type.UnificationFailure" [color="black", fontcolor="red", label="{UnificationFailure|\l|}", shape="record", style="solid"];
"ec.dreamcoder.vs.Union" [color="black", fontcolor="black", label="{Union|elements : frozenset\lisUnion\l|show(isFunction)\l}", shape="record", style="solid"];
"ec.dreamcoder.utilities.UnionFind" [color="black", fontcolor="black", label="{UnionFind|classes : dict\l|newClass(x)\lotherMembers(x)\lunify(x, y)\l}", shape="record", style="solid"];
"ec.dreamcoder.taskBatcher.UnsolvedEntropyTaskBatcher" [color="black", fontcolor="black", label="{UnsolvedEntropyTaskBatcher|\l|getTaskBatch(ec_result, tasks, taskBatchSize, currIteration)\l}", shape="record", style="solid"];
"ec.dreamcoder.taskBatcher.UnsolvedRandomEntropyTaskBatcher" [color="black", fontcolor="black", label="{UnsolvedRandomEntropyTaskBatcher|\l|getTaskBatch(ec_result, tasks, taskBatchSize, currIteration)\l}", shape="record", style="solid"];
"ec.dreamcoder.taskBatcher.UnsolvedTaskBatcher" [color="black", fontcolor="black", label="{UnsolvedTaskBatcher|start : int\ltimesSolved : dict\l|getTaskBatch(ec_result, tasks, taskBatchSize, currIteration)\l}", shape="record", style="solid"];
"ec.dreamcoder.grammar.Uses" [color="black", fontcolor="black", label="{Uses|actualUses : dict, defaultdict\lactualVariables : float\lpossibleUses : defaultdict, dict\lpossibleVariables : float\l|join(z)\l}", shape="record", style="solid"];
"ec.dreamcoder.vs.VersionTable" [color="black", fontcolor="black", label="{VersionTable|debug : bool\lempty : int\lexpression2index : dict\lexpressions : list\lfactored : bool\lfunctionInhabitantTable : list\lidentity : bool\linhabitantTable : list\lmaximumShift : list\loverlapTable : dict\lrecursiveTable : list\lsubstitutionTable : dict\lsuperCache : dict\ltyped : bool\luniverse : int\l|abstract(b)\laddInventionToGrammar(candidate, g0, frontiers, pseudoCounts)\lapply(f, x)\lbestInventions(versions, bs)\lbranchingFactor(j)\lclearOverlapTable()\lextract(j)\lhaveOverlap(a, b)\lincorporate(p)\lindex(i)\lintention(j, isFunction)\lintersection(a, b)\linversion(j)\lloadEquivalences(g, spaces)\lminimalFunctionInhabitants(j)\lminimalInhabitants(j)\lproperVersionSpace(j, n)\lreachable(heads)\lrecursiveInversion(j)\lrepeatedExpansion(j, n)\lrewriteReachable(heads, n)\lrewriteWithInvention(i, js)\lshiftFree(j, n, c)\lsize(j)\lsubstitutions(j)\lsuperVersionSpace(j, n)\lunion(elements)\lvisualize(j)\lwalk(j)\l}", shape="record", style="solid"];
"ec.bin.physics.Vignette" [color="black", fontcolor="black", label="{Vignette|l\ltrajectories : tuple\l|visualize()\l}", shape="record", style="solid"];
"ec.pregex.pregex.Wrapper" [color="black", fontcolor="black", label="{Wrapper|\l|consume(s, state)\lsample(state)\l}", shape="record", style="solid"];
"ec.dreamcoder.utilities.random_seed" [color="black", fontcolor="black", label="{random_seed|seed\l|}", shape="record", style="solid"];
"ec.dreamcoder.utilities.timing" [color="black", fontcolor="black", label="{timing|message\lstart\l|}", shape="record", style="solid"];
"ec.dreamcoder.differentiation.AbsoluteValue" -> "ec.dreamcoder.differentiation.DN" [arrowhead="empty", arrowtail="none"];
"ec.dreamcoder.differentiation.Addition" -> "ec.dreamcoder.differentiation.DN" [arrowhead="empty", arrowtail="none"];
"ec.dreamcoder.differentiation.Clamp" -> "ec.dreamcoder.differentiation.DN" [arrowhead="empty", arrowtail="none"];
"ec.dreamcoder.differentiation.Division" -> "ec.dreamcoder.differentiation.DN" [arrowhead="empty", arrowtail="none"];
"ec.dreamcoder.differentiation.Exponentiation" -> "ec.dreamcoder.differentiation.DN" [arrowhead="empty", arrowtail="none"];
"ec.dreamcoder.differentiation.LSE" -> "ec.dreamcoder.differentiation.DN" [arrowhead="empty", arrowtail="none"];
"ec.dreamcoder.differentiation.Logarithm" -> "ec.dreamcoder.differentiation.DN" [arrowhead="empty", arrowtail="none"];
"ec.dreamcoder.differentiation.Multiplication" -> "ec.dreamcoder.differentiation.DN" [arrowhead="empty", arrowtail="none"];
"ec.dreamcoder.differentiation.Negation" -> "ec.dreamcoder.differentiation.DN" [arrowhead="empty", arrowtail="none"];
"ec.dreamcoder.differentiation.Placeholder" -> "ec.dreamcoder.differentiation.DN" [arrowhead="empty", arrowtail="none"];
"ec.dreamcoder.differentiation.Square" -> "ec.dreamcoder.differentiation.DN" [arrowhead="empty", arrowtail="none"];
"ec.dreamcoder.differentiation.Subtraction" -> "ec.dreamcoder.differentiation.DN" [arrowhead="empty", arrowtail="none"];
"ec.dreamcoder.program.Abstraction" -> "ec.dreamcoder.program.Program" [arrowhead="empty", arrowtail="none"];
"ec.dreamcoder.program.Application" -> "ec.dreamcoder.program.Program" [arrowhead="empty", arrowtail="none"];
"ec.dreamcoder.program.FragmentVariable" -> "ec.dreamcoder.program.Program" [arrowhead="empty", arrowtail="none"];
"ec.dreamcoder.program.Hole" -> "ec.dreamcoder.program.Program" [arrowhead="empty", arrowtail="none"];
"ec.dreamcoder.program.Index" -> "ec.dreamcoder.program.Program" [arrowhead="empty", arrowtail="none"];
"ec.dreamcoder.program.Invented" -> "ec.dreamcoder.program.Program" [arrowhead="empty", arrowtail="none"];
"ec.dreamcoder.program.Primitive" -> "ec.dreamcoder.program.Program" [arrowhead="empty", arrowtail="none"];
"ec.dreamcoder.task.DifferentiableTask" -> "ec.dreamcoder.task.Task" [arrowhead="empty", arrowtail="none"];
"ec.dreamcoder.type.Occurs" -> "ec.dreamcoder.type.UnificationFailure" [arrowhead="empty", arrowtail="none"];
"ec.dreamcoder.type.TypeConstructor" -> "ec.dreamcoder.type.Type" [arrowhead="empty", arrowtail="none"];
"ec.dreamcoder.type.TypeVariable" -> "ec.dreamcoder.type.Type" [arrowhead="empty", arrowtail="none"];
"ec.pregex.pregex.Alt" -> "ec.pregex.pregex.Pregex" [arrowhead="empty", arrowtail="none"];
"ec.pregex.pregex.CharacterClass" -> "ec.pregex.pregex.Pregex" [arrowhead="empty", arrowtail="none"];
"ec.pregex.pregex.Concat" -> "ec.pregex.pregex.Pregex" [arrowhead="empty", arrowtail="none"];
"ec.pregex.pregex.KleeneStar" -> "ec.pregex.pregex.Pregex" [arrowhead="empty", arrowtail="none"];
"ec.pregex.pregex.Maybe" -> "ec.pregex.pregex.Pregex" [arrowhead="empty", arrowtail="none"];
"ec.pregex.pregex.NonEmpty" -> "ec.pregex.pregex.Pregex" [arrowhead="empty", arrowtail="none"];
"ec.pregex.pregex.Plus" -> "ec.pregex.pregex.Pregex" [arrowhead="empty", arrowtail="none"];
"ec.pregex.pregex.String" -> "ec.pregex.pregex.Pregex" [arrowhead="empty", arrowtail="none"];
"ec.pregex.pregex.Wrapper" -> "ec.pregex.pregex.Pregex" [arrowhead="empty", arrowtail="none"];
"ec.dreamcoder.grammar.LikelihoodSummary" -> "ec.dreamcoder.grammar.ContextualGrammar.LS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="noParent", style="solid"];
"ec.dreamcoder.grammar.LikelihoodSummary" -> "ec.dreamcoder.grammar.ContextualGrammar.LS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="variableParent", style="solid"];
"ec.dreamcoder.recognition.ContextualGrammarNetwork_LowRank" -> "ec.dreamcoder.recognition.RecognitionModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="grammarBuilder", style="solid"];
"ec.dreamcoder.recognition.ContextualGrammarNetwork_Mask" -> "ec.dreamcoder.recognition.RecognitionModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="grammarBuilder", style="solid"];
"ec.dreamcoder.recognition.Entropy" -> "ec.dreamcoder.recognition.RecognitionModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="entropy", style="solid"];
"ec.dreamcoder.recognition.GrammarNetwork" -> "ec.dreamcoder.recognition.RecognitionModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="grammarBuilder", style="solid"];
"ec.dreamcoder.recognition.LowRank" -> "ec.dreamcoder.recognition.ContextualGrammarNetwork_LowRank" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="transitionMatrix", style="solid"];
"ec.dreamcoder.utilities.UnionFind.Class" -> "ec.dreamcoder.utilities.UnionFind.Class" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="leader", style="solid"];
}
